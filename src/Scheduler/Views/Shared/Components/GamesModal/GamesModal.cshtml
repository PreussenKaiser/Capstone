@using Scheduler.Domain.Services;
@using Scheduler.ViewModels;
@using Scheduler;

@inject IDateProvider DateProvider

@model UpcomingEventsModalViewModel

@{
    this.ViewData["Title"] = "My Scheduled Games";
    this.ViewData["EventType"] = nameof(Game);

    string today = this.DateProvider.Now.ToString(Constants.DATE_FORMAT);
    string startDateString = this.DateProvider.Now.Date.ToString(Constants.DATE_FORMAT);
    string endDateString = this.DateProvider.Now.AddYears(2).ToString(Constants.DATE_FORMAT);
}

<div class="modal fade" id="gamesModalPopup" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header noPrintIfModal">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            @if (this.Model.CoachTeamsCount != 0)
            {
                <div class="modal-body">
                    <div class="text-center">
                        <h2 class="mb-4">@this.ViewData["Title"]</h2>
                        <div class="btn-group mb-2 noPrintIfModal">
                            <form class="me-3" action="javascript:void(0);" onsubmit="filterGames(this)" id="gamesFilterForm" autocomplete="off">
                                <div>
                                    <div class="linkElement">
                                        <button type="button" class="button buttonRed" onclick="showGamesModalDropdown()" data-bs-auto-close="false" aria-expanded="false">Filter Results </button>
                                        <button class="button buttonRed" type="reset" onclick="resetGamesFilter()">Reset Filter</button>
                                    </div>
                                    <ul class="dropdown-menu p-3" style="width:120%" id="gamesModalDropdown">
                                        <h5 class="lead text-danger text-center">Filter Criteria <i class="bi bi-question-circle calendar-full" data-bs-toggle="tooltip" data-bs-placement="right" title="Choose options below to filter your results."></i></h5>
                                        <div>
                                            <div class="form-label">
                                                <label class="form-label">Event Date(s) <i class="bi bi-question-circle" data-bs-custom-class="custom-tooltip" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-html="true" title="<b>To use the PCYS Date Picker:</b><br /><br /><b>Picking a single date:</b> Click twice on the desired day.<br /><br /><b>Picking a range of days:</b> Click once on the starting day, then click on the ending day. The highlight between the days will show the range.<br /><br />Once the desired dates are selected and shown at the bottom, click 'Apply' and confirm that the desired dates show in the resulting box.<br /><br />Do not click outside of the datepicker box without clicking 'Apply' or the new dates will <u>not</u> be applied."></i></label>
                                                <input type="text" name="gamesDaterange" class="text-center form-control" />
                                            </div>
                                            <div>
                                                <input name="StartDate" type="hidden" id="StartDate" />
                                                <br />
                                            </div>
                                            <div>
                                                <input name="EndDate" type="hidden" id="EndDate" />
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Event Name</label>
                                            <input type="text" name="searchTerm" class="form-control" />
                                        </div>
                                        @if (this.Model.CoachTeamsCount > 1)
                                        {
                                            <div class="mb-3">
                                                <label class="form-label">Team Name</label>
                                                <select id="coachTeamNameFilterGames" name="teamName" class="form-select">
                                                    <option value=""></option>

                                                    @foreach (Team t in this.Model.CoachTeams)
                                                    {
                                                        <option value=@t.Name>@t.Name</option>
                                                    }
                                                </select>
                                            </div>
                                        }
                                        else
                                        {
                                            Team? team = this.Model.CoachTeams.First();

                                            <select name="teamName" hidden value="@team.Name"></select>
                                        }
                                        <div class="text-center">
                                            <div class="linkElement">
                                                <input type="submit" class="button buttonYellow" value="Search" />
                                                <button type="button" class="button buttonRed" onclick="closeGamesDropdown()">Close</button>
                                            </div>
                                        </div>
                                    </ul>
                                </div>
                            </form>
                        </div>
                    </div>
                    <div id="gamesModalTable" class="table-responsive w-100 m-auto">
                        <partial name="_CoachModalTable" model="this.Model" />
                    </div>
                </div>
                <div class="modal-footer noPrintIfModal">
                    <div class="linkElement">
                        <button class="button buttonYellow calendar-full" onclick="window.print()">Print These Results</button>
                        <button type="button" class="button buttonRed" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            }
            else
            {    
                <div class="modal-body">
                    <h1 class="text-danger text-center display-5">You have no Teams</h1>
                </div>
                <div class="modal-footer noPrintIfModal">
                    <div class="linkElement">
                        <button type="button" class="button buttonRed" data-bs-dismiss="modal">Close</button>
                    </div>     
                </div>
            }
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        $("#gamesModalPopup").modal("show");
    });

    function showGamesModalDropdown() {
        $('#gamesModalDropdown').addClass('show');
    }

    function closeGamesDropdown() {
        $('#gamesModalDropdown').removeClass('show');
    }

    $(document).ready(function () {
        setGamesModalDatePicker();
        $("#coachTeamNameFilterGames").select2({
            placeholder: "Start typing to select a Team...",
            width: "100%",
            dropdownParent: $('#gamesModalPopup')
        });
    });

    function setGamesModalDatePicker () {
        var startDateString = "@startDateString";
        var endDateString = "@endDateString";
        var minDateString = "@today";
        var startDate;
        var startDateFormatted;
        var endDate;
        var endDateFormatted;
        var minDate;
        var minDateFormatted;

        startDate = moment(startDateString, "YYYY-MM-DD"); // Parse the start date string and specify the format
        startDateFormatted = startDate.format('M/DD/YYYY'); // Format the start date as desired
        endDate = moment(endDateString, "YYYY-MM-DD"); // Parse the end date string and specify the format
        endDateFormatted = endDate.format('M/DD/YYYY'); // Format the end date as desired
        minDate = moment(minDateString, "YYYY-MM-DD"); // Parse the min date string and specify the format
        minDateFormatted = minDate.format('M/DD/YYYY'); // Format the min date as desired

        $('#StartDate').val(startDateFormatted); // Set initial value of StartDate on the form
        $('#EndDate').val(endDateFormatted); // Set initial value of EndDate on the form


        $(function () {
            $('input[name="gamesDaterange"]').daterangepicker({
                startDate: startDateFormatted,
                endDate: endDateFormatted,
                minDate: minDateFormatted,
                timePickerIncrement: 30,
                drops: "down",
                locale: {
                    format: 'M/DD/YYYY'
                }
            }).on('apply.daterangepicker', function (ev, picker) {
                startDateFormatted = picker.startDate.format('M/DD/YYYY');
                endDateFormatted = picker.endDate.format('M/DD/YYYY');
                $('#StartDate').val(startDateFormatted); // Resets the value of StartDate when "Apply" is pressed
                $('#EndDate').val(endDateFormatted); // Resets the value of EndDate when "Apply" is pressed
            });
        });
    }

    function filterGames(e) {
        $.ajax({
            url: '@this.Url.Action("filterCoachEvents", "Dashboard")',
            data: {
                searchTerm: e.searchTerm.value,
                type: 'Game',
                start: e.StartDate.value,
                end: e.EndDate.value,
                teamName: e.teamName.value
            },
            success: function (data) {
                $("#gamesModalTable").html(data);
                $('#gamesModalDropdown').removeClass('show');
            }
        });
    }

    function resetGamesFilter() {
        $.ajax({
            url: '@this.Url.Action("filterCoachEvents", "Dashboard")',
            data: {
                searchTerm: '',
                type: 'Game',
                start: '@startDateString',
                end: '@endDateString',
                teamName: ''
            },
            success: function (data) {
                setGamesModalDatePicker();
                $("#coachTeamNameFilterGames").val(null).trigger('change');
                $("#gamesModalTable").html(data);
            }
        });
    }
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl)
    })
</script>
<style>
    .custom-tooltip .tooltip-inner {
        max-width: 500px;
    }
</style>

<style media="print">
    .noPrintIfModal {
        display: none;
    }

    html, body {
        height: 100%;
        overflow: hidden;
    }
</style>
