@using Microsoft.AspNetCore.Identity
@using Scheduler.Domain.Services;
@using Scheduler.Web.Controllers;

@inject IDateProvider DateProvider
@inject SignInManager<User> SignInManager

@{
    int currentDate = this.DateProvider.Now.Year;

    // The list to store the years used for the select.
    List<int> yearList = new() { currentDate };

    // Store the next 9 years in addition to the current year.
    for (int i = 1; i <= 9; i++)
    {
        yearList.Add(currentDate + i);
    }

    int weeks = Convert.ToInt32(this.ViewData["NumberOfWeeks"]);
    int previousYear = Convert.ToInt32(this.ViewData["previousYear"]);
    int previousMonth = Convert.ToInt32(this.ViewData["previousMonth"]);
    int nextYear = Convert.ToInt32(this.ViewData["nextYear"]);
    int nextMonth = Convert.ToInt32(this.ViewData["nextMonth"]);
    int currentMonth = Convert.ToInt32(this.ViewData["Month"]);
    int currentYear = Convert.ToInt32(this.ViewData["Year"]);
    string currentMonthName = this.ViewData["MonthName"] as string ?? string.Empty;
}

<div class="calendar noPrintIfModal table-responsive w-100 m-auto">
    <table id="calendar-full" class="table table-bordered calendar-full">
        <thead>
            <tr>
                <th colspan="2" class="text-center">
                    @if (Convert.ToInt32(this.ViewData["PreviousMonth"]) != 0)
                    {
                        <button class="monthly-arrow left-arrow" onclick="RefreshCalendar(@previousYear, @previousMonth)">&#8592;</button>
                    }
                    else
                    {
                        <button class="monthly-arrow left-arrow arrow-disabled">&#8592;</button>
                    }
                </th>
                <th class="text-center align-middle" colspan="4">
                    <div class="row d-flex justify-content-center">
                        <div class="col">
                            <select title="Month" id="month" class="form-select calendar-title text-center" style="width:120%">
                                <option value="1" selected="@(currentMonth == 1)">January</option>
                                <option value="2" selected="@(currentMonth == 2)">February</option>
                                <option value="3" selected="@(currentMonth == 3)">March</option>
                                <option value="4" selected="@(currentMonth == 4)">April</option>
                                <option value="5" selected="@(currentMonth == 5)">May</option>
                                <option value="6" selected="@(currentMonth == 6)">June</option>
                                <option value="7" selected="@(currentMonth == 7)">July</option>
                                <option value="8" selected="@(currentMonth == 8)">August</option>
                                <option value="9" selected="@(currentMonth == 9)">September</option>
                                <option value="10" selected="@(currentMonth == 10)">October</option>
                                <option value="11" selected="@(currentMonth == 11)">November</option>
                                <option value="12" selected="@(currentMonth == 12)">December</option>
                            </select>
                        </div>
                        <div class="col d-flex justify-content-center">
                            <select title="Year" id="year" class="form-select calendar-title text-center w-75">
                                @foreach (var year in yearList)
                                {
                                    <option value="@year" selected="@(currentYear == year)">@year</option>
                                }
                            </select>
                        </div>
                    </div>
                </th>
                <th class="text-center" colspan="2">
                    <button class="monthly-arrow right-arrow" onclick="RefreshCalendar(@nextYear, @nextMonth)">&#8594;</button>
                </th>
            </tr>
            <tr class="text-center">
                <th><button class="button buttonRed month-button" onclick="monthModal(@currentYear, @currentMonth)">Monthly List</button></th>
                <th>Sunday</th>
                <th>Monday</th>
                <th>Tuesday</th>
                <th>Wednesday</th>
                <th>Thursday</th>
                <th>Friday</th>
                <th>Saturday</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 1; i < weeks + 1; i++)
            {
                List<string> currentWeek = this.ViewData["Week" + i + "List"] as List<string> ?? new();

                <tr colspan="8">
                    <td colspan="1" id="weekly-button" class="text-center">
                        @{
                            DateTime endOfWeek = Convert.ToDateTime(this.ViewData["Week" + i + "End"]);
                            DateTime startOfWeek = Convert.ToDateTime(this.ViewData["Week" + i + "Start"]);
                            DateTime currentDay = Convert.ToDateTime(this.ViewData["CurrentDay"]);
                        }

                        @if (endOfWeek >= currentDay)
                        {
                            <button class="button buttonYellow week-button" onclick="weekModal(@startOfWeek.Year, @startOfWeek.Month, @startOfWeek.Day)">Weekly List</button>
                        }
                    </td>

                    @for (int ii = 0; ii < 49; ii += 7)
                    {
                        <td colspan="1" class="@currentWeek[ii + 2] @currentWeek[ii + 4] @currentWeek[ii + 5] text-center">
                            <span class="calendar-date text-center">@currentWeek[ii+1]</span>
                            @if (currentWeek[ii + 3] == "active")
                            {
                                DateTime buttonDate = DateTime.Parse(currentWeek[ii]);

                                @if (currentWeek[ii + 6] != "0")
                                {
                                    @if (currentWeek[ii + 6] == "1")
                                    {
                                        <span class="calendar-event">@currentWeek[ii+6] Event</span>
                                    }
                                    else
                                    {
                                        <span class="calendar-event">@currentWeek[ii+6] Events</span>
                                    }
                                    <hr>
                                    <button class="btn btn-sm btn-secondary day-button" onclick="dayModal(@buttonDate.Year, @buttonDate.Month, @buttonDate.Day)">LIST</button>
                                    @if (this.SignInManager.IsSignedIn(this.User))
                                    {
                                        <button class="btn btn-sm btn-dark day-button" onclick="gridModal(@buttonDate.Year, @buttonDate.Month, @buttonDate.Day)">GRID</button>
                                    }
                                }
                                else
                                {
                                    <span class="calendar-event">No Events</span>
                                    <hr>
                                    @if (this.SignInManager.IsSignedIn(this.User))
                                    {
                                        <button class="btn btn-sm btn-dark day-button" onclick="gridModal(@buttonDate.Year, @buttonDate.Month, @buttonDate.Day)">GRID</button>
                                    }
                                }
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>

    <table id="calendar-mobile" class="table table-bordered calendar-mobile w-100 m-auto">
        <thead>
            <tr aria-hidden="true" class="table-format">
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
            <tr>
                <th>
                    @if (Convert.ToInt32(this.ViewData["PreviousMonth"]) != 0)
                    {
                        <button class="monthly-arrow left-arrow" onclick="RefreshCalendar(@previousYear, @previousMonth)">&#8592;</button>
                    }
                    else
                    {
                        <button class="monthly-arrow left-arrow arrow-disabled">&#8592;</button>
                    }
                </th>
                <th class="text-center align-middle calendar-title" colspan="5">
                    @currentMonthName
                    @currentYear
                </th>
                <th>
                    <button class="monthly-arrow right-arrow" onclick="RefreshCalendar(@nextYear, @nextMonth)">&#8594;</button>
                </th>
            </tr>
            <tr class="text-start">
                <th colspan="4"><button class="button buttonRed month-button" onclick="monthModal(@currentYear, @currentMonth)">Monthly List</button></th>
            </tr>
            <tr class="text-center">
                <th>Sun</th>
                <th>Mon</th>
                <th>Tue</th>
                <th>Wed</th>
                <th>Thu</th>
                <th>Fri</th>
                <th>Sat</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 1; i < weeks + 1; i++)
            {
                List<string> currentWeek = this.ViewData["Week" + i + "List"] as List<string> ?? new();

                <tr> 
                    @for (int ii = 0; ii < 49; ii += 7)
                    {

                        @if (currentWeek[ii + 3] == "active")
                        {
                            DateTime buttonDate = DateTime.Parse(currentWeek[ii]);

                            if (currentWeek[ii + 6] != "0")
                            {
                                <td class="@currentWeek[ii + 2] @currentWeek[ii + 4] @currentWeek[ii + 5] text-center clickable-cell"
                                    data-year="@buttonDate.Year" data-month="@buttonDate.Month" data-date="@buttonDate.Day">
                                    <span class="calendar-date text-center">@currentWeek[ii+1]</span>
                                    Tap for Events
                                </td>
                            }
                            else if (this.User.Identity is not null &&
                                     this.User.Identity.IsAuthenticated)
                            {
                                <td class="@currentWeek[ii + 2] @currentWeek[ii + 4] @currentWeek[ii + 5] text-center clickable-grid"
                                    data-year="@buttonDate.Year" data-month="@buttonDate.Month" data-date="@buttonDate.Day">
                                    <span class="calendar-date text-center">@currentWeek[ii+1]</span>
                                    Tap for Grid
                                </td>
                            }
                            else
                            {
                               <td class="@currentWeek[ii + 2] @currentWeek[ii + 4] @currentWeek[ii + 5] text-center">
                                    <span class="calendar-date text-center">@currentWeek[ii+1]</span>
                               </td> 
                            }
                        }
                        else
                        {
                           <td class="@currentWeek[ii + 2] @currentWeek[ii + 4] @currentWeek[ii + 5] text-center">
                                <span class="calendar-date text-center">@currentWeek[ii+1]</span>
                           </td> 
                        }
                    }
                </tr>
            }
        </tbody>
    </table>
</div>

<div id="gridmodal"></div>
<div id="modal"></div>

<script>
    var calendar = document.getElementById('calendar-full');
    calendar.removeEventListener('click', handleClick);

    var mobileCalendar = document.getElementById('calendar-mobile');
    mobileCalendar.addEventListener('click', handleClick);

    function handleClick(event) {
        var target = event.target;
        if (target.classList.contains('clickable-cell')) {
            var year = target.getAttribute('data-year') || new Date().getFullYear();
            var month = target.getAttribute('data-month') || new Date().getMonth();
            var date = target.getAttribute('data-date') || new Date().getDate();

            dayModal(year, month, date);
        }
        if (target.classList.contains('clickable-grid')) {
            var year = target.getAttribute('data-year') || new Date().getFullYear();
            var month = target.getAttribute('data-month') || new Date().getMonth();
            var date = target.getAttribute('data-date') || new Date().getDate();

            gridModal(year, month, date);
        }
    }

    (function () {
        // Get the select elements from the calendar.
        const monthSelect = document.getElementById("month");
        const yearSelect = document.getElementById("year");

        // Event listeners for the id's.
        monthSelect.addEventListener("change", updateCalendar);
        yearSelect.addEventListener("change", updateCalendar);

        function grayOutPastMonths() {
            const now = new Date();
            const currentYear = now.getFullYear();
            const currentMonth = now.getMonth() + 1;

            const yearSelect = document.getElementById("year");
            const monthSelect = document.getElementById("month");

            for (let i = 1; i <= 12; i++) {
                if (yearSelect.value < currentYear || (yearSelect.value == currentYear && i < currentMonth)) {
                    const option = monthSelect.querySelector(`option[value='${i}']`);
                    option.disabled = true;
                    option.style.color = 'grey';
                } else {
                    const option = monthSelect.querySelector(`option[value='${i}']`);
                    option.disabled = false;
                    option.style.color = 'black';
                }
            }
        }

        function updateCalendar() {
            // Get the selected month and year
            const selectedMonth = monthSelect.value;
            const selectedYear = yearSelect.value;

            // Update the calendar by calling the RefreshCalendar function with the selected month and year
            RefreshCalendar(selectedYear, selectedMonth);

            // Disable past months in the month select.
            if (currentYear === +yearSelect.value) {
                for (let i = 1; i < currentMonth; i++) {
                    monthSelect.options[i].disabled = true;
                }
            } else {
                for (let i = 1; i <= 12; i++) {
                    monthSelect.options[i].disabled = false;
                }
            }
        }        

        // Call the function to gray out past months on page load
        grayOutPastMonths();
    })();

    function RefreshCalendar(year, month) {
        $.ajax({
            url: '@Url.Action("refreshCalendar", "Home")',
            data: {
                year: year,
                month: month
            },
            success: function (data) {
                $("#calendar").html(data);
            }
        })
    }

    function monthModal(year, month) {
        $.ajax({
            url: '@Url.Action("monthModal", "Dashboard")',
            data: {
                year: year ?? new Date().getFullYear(),
                month: month ?? new Date().getMonth()
            },
            success: function(data) {
                $("#modal").html(data);
            }
        });
    }

    function weekModal(year, month, start) {
        $.ajax({
            url: '@Url.Action("weekModal", "Dashboard")',
            data: {
                year: year ?? new Date().getFullYear(),
                month: month ?? new Date().getMonth(),
                weekStart: start ?? new Date().getDate()
            },
            success: function(data) {
                $("#modal").html(data);
            }
        });
    }

    function dayModal(year, month, date) {
        $.ajax({
            url: '@this.Url.Action("dayModal", "Dashboard")',
            data: {
                year: year ?? new Date().getFullYear(),
                month: month ?? new Date().getMonth(),
                date: date ?? new Date().getDate()
            },
            success: function (data) {
                $("#modal").html(data);
            }
        });
    }

    function gridModal(year, month, date) {
        $.ajax({
            url: '@Url.Action("gridModal", "Dashboard")',
            data: {
                year: year ?? new Date().getFullYear(),
                month: month ?? new Date().getMonth(),
                date: date ?? new Date().getDate()
            },
            success: function (data) {
                $("#gridmodal").html(data);
            }
        });
    }
</script>
