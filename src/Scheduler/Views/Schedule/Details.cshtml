@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore;
@using Scheduler.Domain.Repositories;
@using Scheduler.Domain.Services;
@using Scheduler.Domain.Specifications;
@using System.Security.Claims;
@using System.Text;
@using Scheduler;

@inject ITeamRepository TeamRepository
@inject IFieldRepository FieldRepository
@inject IDateProvider DateProvider
@inject UserManager<User> UserManager

@model Event

@{
    this.ViewData["Title"] = this.Model.Name;

    string today = this.DateProvider.Now.ToString(Constants.DATE_FORMAT);
    string startDateString = this.Model.StartDate.ToString(Constants.DATETIME_FORMAT);
    string endDateString = this.Model.EndDate.ToString(Constants.DATETIME_FORMAT);

    string eventType = this.Model.GetType().Name;
    bool recurringEvent = this.Model.RecurrenceId is not null;
    bool canEdit = this.User.IsInRole(Role.ADMIN) ||
                   this.UserManager.GetUserId(this.User) == this.Model.UserId.ToString();

    IEnumerable<SelectListItem> fieldList = (await this.FieldRepository.SearchAsync(new GetAllSpecification<Field>()))
        .Select(f => new SelectListItem
        {
            Text = f.Name,
            Value = f.Id.ToString()
        });
}

<div class="row">
    <div class="col-sm-6 mx-auto">
        <div class="mb-2">
            <form action="@this.Url.Action("Events", "Dashboard")" method="get">
                <button type="submit" class="button buttonRed">< Back</button>
            </form>
        </div>

        <form method="post" action="">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <input hidden asp-for="Id" value="@this.Model.Id" />
            <input hidden asp-for="UserId" value="@this.User.FindFirst(ClaimTypes.NameIdentifier)!.Value" />
            <input hidden asp-for="RecurrenceId" value="@this.Model.RecurrenceId" />

            <ul class="list-group">
                <li class="list-group-item">
                    <div class="d-flex justify-content-between w-100">
                        <h5>@eventType Details</h5>

                        @if (canEdit)
                        {                
                            <button type="button" class="button buttonRed" data-bs-toggle="modal" data-bs-target="#detailsModal">
                                Edit
                            </button>
                            <div class="modal fade" id="detailsModal" tabindex="-1" aria-hidden="true">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title">@this.Model.Name Details</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">
                                            <div class="row">
                                                <div class="col">
                                                    <div class="mb-3">
                                                        <label asp-for="Name" class="form-label h6"></label>
                                                        <input asp-for="Name" class="form-control" />
                                                        <span asp-validation-for="Name" class="text-danger"></span>
                                                    </div>
                                                    <div class="mb-3">
                                                        @if (eventType != nameof(Event))
                                                        {
                                                            <partial name="Forms/_@(eventType)Inputs" />
                                                        }
                                                    </div>
                                                </div>

                                                @if (recurringEvent)
                                                {
                                                    <div class="col-6">
                                                        <partial name="Forms/_UpdateTypeInput" />
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="button buttonRedOutline" data-bs-dismiss="modal">Close</button>
                                            <input asp-action="EditDetails" asp-controller="@eventType" type="submit" value="Submit" class="button buttonYellow" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="row">
                        <div class="col-6">
                            <h6>Name</h6>
                            @this.Model.Name
                        </div>
                        <div class="col-6">
                            @if (this.Model is Practice practice)
                            {
                                Team? team = (await this.TeamRepository
                                    .SearchAsync(new ByIdSpecification<Team>(practice.TeamId)))
                                    .FirstOrDefault();

                                if (team is not null)
                                {                                
                                    <h6>Team</h6>
                                    <small>@team.Name</small>
                                }
                            }
                            else if (this.Model is Game game)
                            {
                                Team? homeTeam = (await this.TeamRepository
                                    .SearchAsync(new ByIdSpecification<Team>(game.HomeTeamId)))
                                    .FirstOrDefault();

                                Team? opposingTeam = (await this.TeamRepository
                                    .SearchAsync(new ByIdSpecification<Team>(game.OpposingTeamId)))
                                    .FirstOrDefault();

                                if (homeTeam is not null &&
                                    opposingTeam is not null)
                                {
                                    <h6>Teams</h6>
                                    <small>
                                        @homeTeam.Name vs. @opposingTeam.Name
                                    </small>
                                }
                            }
                        </div>
                    </div>
                </li>
                <li class="list-group-item">
                    <div class="d-flex justify-content-between w-100">
                        <h5>Date</h5>
                        <div class="d-grid gap-2 d-md-block">
                            @if (canEdit)
                            {             
                                <button type="button" class="button buttonRed" data-bs-toggle="modal" data-bs-target="#rescheduleModal">
                                    Reschedule
                                </button>
                                <div class="modal fade" id="rescheduleModal" tabindex="-1" aria-hidden="true">
                                    <div class="modal-dialog">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title">Reschedule Event</h5>
                                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                            </div>
                                            <div class="modal-body">
                                                <div class="row">
                                                    <div class="col-6">
                                                        <div class="col-lg">
                                                            <label class="form-label">Event Time <i class="bi bi-question-circle" data-bs-custom-class="custom-tooltip" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-html="true" title="<b>To use the PCYS Date Picker:</b><br /><br /><b>Picking a single date:</b> Click twice on the desired day.<br /><br /><b>Picking a range of days:</b> Click once on the starting day, then click on the ending day. The highlight between the days will show the range.<br /><br /><b>Adjusting times:</b> Use the dropdowns at the bottom. The starting time is on the left, the ending time is on the right.<br /><br />Once the desired dates and times are selected and shown at the bottom, click 'Apply' and confirm that the desired dates and times show in the resulting box.<br /><br />Do not click outside of the datepicker box without clicking 'Apply' or the new dates and times will <u>not</u> be applied."></i></label>
                                                            <input type="text" name="daterange" class="text-center form-control" />
                                                        </div>
                                                        <div>
                                                            <input asp-for="StartDate" type="hidden" id="StartDate" />
                                                            <span asp-validation-for="StartDate" class="text-danger"></span>
                                                            <br />
                                                        </div>
                                                        <div>
                                                            <input asp-for="EndDate" type="hidden" id="EndDate" />
                                                            <span asp-validation-for="EndDate" class="text-danger"></span>
                                                        </div>
                                                        <div class="mb-3">
                                                            <div id="recurrenceInputs">
                                                                @if (this.Model.Recurrence is not null)
                                                                {
                                                                    <div class="row mb-3">
                                                                        <div class="col-6">
                                                                            <label asp-for="Recurrence!.Type" class="form-label"></label>
                                                                            <select asp-for="Recurrence!.Type" asp-items="@this.Html.GetEnumSelectList<RecurrenceType>()" class="form-control" disabled></select>
                                                                        </div>
                                                                        <div class="col-6">
                                                                            <label asp-for="Recurrence!.Occurrences" class="form-label"></label>
                                                                            <input type="number" asp-for="Recurrence!.Occurrences" class="form-control" readonly />
                                                                            <span asp-validation-for="Recurrence!.Occurrences" class="text-danger"></span>
                                                                        </div>
                                                                    </div>
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                    @if (recurringEvent)
                                                    {
                                                        <div class="col-6">
                                                            <partial name="Forms/_UpdateTypeInput" />
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="button buttonRedOutline" data-bs-dismiss="modal">Close</button>
                                                <input asp-action="Reschedule" asp-controller="@eventType" type="submit" value="Reschedule" class="button buttonYellow" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <button type="button" class="button buttonRed" data-bs-toggle="modal" data-bs-target="#cancelModal">
                                    Cancel Event
                                </button>
                                <div class="modal fade" id="cancelModal" tabindex="-1" aria-hidden="true">
                                    <div class="modal-dialog">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title">Cancel @eventType</h5>
                                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                            </div>
                                            <div class="modal-body">
                                                <div class="row">
                                                    <div class="col-6">
                                                        <p>
                                                            Are you sure you want to cancel <b>@this.Model.Name</b>?
                                                            It and all recurrences will be permanently removed.
                                                        </p>
                                                    </div>
                                                    @if (recurringEvent)
                                                    {
                                                        <div class="col-6">
                                                            <partial name="Forms/_UpdateTypeInput" />
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="button buttonRedOutline" data-bs-dismiss="modal">Close</button>
                                                <input asp-action="Cancel" asp-controller="@eventType" type="submit" value="Yes, Cancel It" class="button buttonYellow" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }

                        </div>
                    </div>

                    <div class="row">
                        <div class="col-6">
                            <h6>Starts</h6>
                            @this.Html.DisplayFor(x => x.StartDate)
                        </div>
                        <div class="col-6">
                            <h6>Ends</h6>
                            @this.Html.DisplayFor(x => x.EndDate)
                        </div>
                    </div>
                </li>
                <li class="list-group-item">
                    <div class="d-flex justify-content-between w-100">
                        <h5>Location</h5>
                        
                        @if (canEdit)
                        {   
                            <button type="button" class="button buttonRed" data-bs-toggle="modal" data-bs-target="#relocateModal">
                                Relocate
                            </button>
                            <div class="modal fade" id="relocateModal" tabindex="-1" aria-hidden="true">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title">Relocate Event</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">
                                            <div class="row">
                                                <div class="col-6">
                                                    <div class="mb-3">
                                                        <label asp-for="FieldId" class="form-label"></label>
                                                        <select data-val="false" asp-for="FieldId" id="fields" asp-items="fieldList" class="form-select"></select>
                                                        <span asp-validation-for="FieldId" class="text-danger"></span>
                                                    </div>
                                                    @if (this.User.IsInRole(Role.ADMIN) &&
                                                         eventType == nameof(Event))
                                                    {                                               
                                                        <div class="form-check mb-3">
                                                            <input asp-for="IsBlackout" type="checkbox" class="form-check-input">
                                                            <label asp-for="IsBlackout" class="form-check-label">Blackout Facility?</label>
                                                        </div>
                                                    }
                                                </div>
                                                <div class="col-6">
                                                    @if (recurringEvent)
                                                    {
                                                        <partial name="Forms/_UpdateTypeInput" />
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="button buttonRedOutline" data-bs-dismiss="modal">Close</button>
                                            <input asp-action="Relocate" asp-controller="@eventType" type="submit" value="Relocate" class="button buttonYellow" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    @if (this.Model.IsBlackout)
                    {
                        <span>Entire Facility</span>
                    }
                    else
                    {
                        @this.Model.Field?.Name
                    }
                </li>
            </ul>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="~/js/RecurrenceForm.js"></script>
}

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/jquery/latest/jquery.min.js"></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />
<script>
    $(document).ready(function () {

        $("#practiceTeams").select2({
            placeholder: "Start typing to select a Team...",
            width: "100%",
            dropdownParent: $('#detailsModal')
        });

        $("#homeTeams").select2({
            placeholder: "Start typing to select a Team...",
            width: "100%",
            dropdownParent: $('#detailsModal')
        });

        $("#opposingTeams").select2({
            placeholder: "Start typing to select a Team...",
            width: "100%",
            dropdownParent: $('#detailsModal')
        });

        $("#fields").select2({
            width: "100%",
            dropdownParent: $('#relocateModal')
        });

    });
     var startDateString = "@startDateString";
     var endDateString = "@endDateString";
     var minDateString = "@today";
     var startDate;
     var startDateFormatted;
     var endDate;
     var endDateFormatted;
     var minDate;
     var minDateFormatted;
     startDate = moment(startDateString, "YYYY-MM-DDTHH:mm"); // Parse the start date string and specify the format
     startDateFormatted = startDate.format('M/DD/YYYY hh:mm A'); // Format the start date as desired
     endDate = moment(endDateString, "YYYY-MM-DDTHH:mm"); // Parse the end date string and specify the format
     endDateFormatted = endDate.format('M/DD/YYYY hh:mm A'); // Format the end date as desired
     minDate = moment(minDateString, "YYYY-MM-DDTHH:mm"); // Parse the min date string and specify the format
     minDateFormatted = minDate.format('M/DD/YYYY hh:mm A'); // Format the min date as desired
     $('#StartDate').val(startDateFormatted); // Set initial value of StartDate on the form
     $('#EndDate').val(endDateFormatted); // Set initial value of EndDate on the form


     $(function () {
         $('input[name="daterange"]').daterangepicker({
             timePicker: true,
             startDate: startDateFormatted,
             endDate: endDateFormatted,
             minDate: minDateFormatted,
             timePickerIncrement: 30,
             drops: "down",
             locale: {
                 format: 'M/DD hh:mm A'
             }
         }).on('apply.daterangepicker', function (ev, picker) {
             startDateFormatted = picker.startDate.format('M/DD/YYYY hh:mm A');
             endDateFormatted = picker.endDate.format('M/DD/YYYY hh:mm A');
             $('#StartDate').val(startDateFormatted); // Resets the value of StartDate when "Apply" is pressed
             $('#EndDate').val(endDateFormatted); // Resets the value of EndDate when "Apply" is pressed
         });
     });
</script>

